import groovy.json.*

buildscript {
	repositories {
		jcenter()
	}
	
	dependencies {
		classpath("io.spring.gradle:dependency-management-plugin:$springPlatformGradleVersion")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
	}
}

apply plugin: "io.spring.dependency-management"

dependencyManagement {
	imports {
		mavenBom "io.spring.platform:platform-bom:$springPlatformVersion"
	}
}

repositories {
	jcenter()
	mavenLocal()
	maven {
        url "https://dl.bintray.com/ijabz/maven"
    }
}


apply plugin: "java"
apply plugin: "war"
apply plugin: "org.springframework.boot"
apply plugin: "maven"
apply plugin: "eclipse"
apply plugin: "eclipse-wtp"

group = "karma"
version = "1.0"

task wrapper(type: Wrapper) {
	gradleVersion = gradleVersion
}

/*
 * Configuration
 */
project.ext.buildDate = new Date().format("yyyyMMdd");

/*
 * Dependencies
 */
dependencies {
	// compile dependencies
	implementation ("accelerate:accelerate-web-utils:1.0")
	implementation ("net.jthink:jaudiotagger:2.2.5")
	implementation ("org.springframework.boot:spring-boot-starter-data-mongodb")
	
	// webjars
	runtimeOnly ("org.webjars:modernizr:2.8.3")
	runtimeOnly ("org.webjars:font-awesome:4.6.3")
	runtimeOnly ("org.webjars:jquery:2.2.4")
	runtimeOnly ("org.webjars:jquery-mobile:1.4.5")
	runtimeOnly ("org.webjars:jquery-ui:1.11.4")
	runtimeOnly ("org.webjars:bootstrap:3.3.6")
	runtimeOnly ("org.webjars:angularjs:1.5.5")
	// runtime("org.webjars:jstree:3.2.1") -- including latest from static folder
	// runtime("org.webjars:datatables:1.10.11") -- including latest build from static folder
	
	// runtime dependencies
	runtimeOnly ("org.springframework.boot:spring-boot-starter-actuator")
	runtimeOnly ("org.springframework.boot:spring-boot-starter-tomcat")
	runtimeOnly ("org.springframework.boot:spring-boot-devtools")
	runtimeOnly ("org.jolokia:jolokia-core")
	
	// test dependencies
	testImplementation ("org.springframework.boot:spring-boot-starter-test")
}

/*
 * Build Settings
 */
compileJava {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

bootRepackage {
	mainClass = "test.apollo.ApolloTest"
	excludeDevtools = false
	enabled = true
}

build.finalizedBy install

/*
 * Eclipse settings
 */
eclipse {
	project {
		natures = ["org.eclipse.wst.common.project.facet.core.nature", 
			"org.eclipse.buildship.core.gradleprojectnature", "org.eclipse.jdt.core.javanature", 
			"org.springframework.ide.eclipse.core.springnature"]
		
		buildCommand "org.eclipse.wst.common.project.facet.core.builder" 
		buildCommand "org.eclipse.buildship.core.gradleprojectbuilder"
		buildCommand "org.eclipse.jdt.core.javabuilder"
		buildCommand "org.springframework.ide.eclipse.core.springbuilder"
		buildCommand "org.springframework.ide.eclipse.boot.validation.springbootbuilder"
	}
	
	classpath {
		file {
			whenMerged { classpath ->
				classpath.entries.collect { entry ->
					if (entry.kind == "con" && entry.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
						entry.path = "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-" + javaVersion
					}
					
					entry
				}
			}
		}
	}
	
	jdt {
		sourceCompatibility = javaVersion
		targetCompatibility = javaVersion
		
		file {
			withProperties { properties ->
				properties.put("org.eclipse.jdt.core.compiler.processAnnotations", "disabled")
				properties.put("org.eclipse.jdt.core.compiler.codegen.targetPlatform", javaVersion)
			}
		}
	}
	
	wtp {
		component {
			contextPath = "apollo"
			deployName = "apollo"
		}
		
		facet {
			facet name: "jst.java", version: javaVersion
			facet name: "jst.web", version: servletVersion
			facet name: "wst.jsdt.web", version: "1.0"
		}
	}
}
