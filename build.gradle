import groovy.json.*

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath("io.spring.gradle:dependency-management-plugin:$springPlatformVersion")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootGradleVersion")
	}
}

apply plugin: "io.spring.dependency-management"

dependencyManagement {
	imports {
		mavenBom "io.spring.platform:platform-bom:$springBootVersion"
	}
}

repositories {
	jcenter()
	mavenLocal()
	maven {
        url "https://dl.bintray.com/ijabz/maven"
    }
}

apply plugin: "java"
apply plugin: "war"
apply plugin: "spring-boot"
apply plugin: "maven"
apply plugin: "eclipse"
apply plugin: "eclipse-wtp"

group = "karma"
version = "1.0"

task wrapper(type: Wrapper) {
	gradleVersion = "2.13"
}

/*
 * Dependencies
 */
dependencies {
	compile("karma:accelerate:1.0")
	compile("org.springframework.boot:spring-boot-starter-data-mongodb")
	
	compile("net.jthink:jaudiotagger:2.2.5")
	//compile("org.springframework.social:spring-social-security")
	//compile("org.springframework.boot:spring-boot-starter-social-facebook")
	//compile("org.springframework.social:spring-social-facebook-web")
	//compile("org.springframework.boot:spring-boot-starter-social-linkedin")
	//compile("org.springframework.boot:spring-boot-starter-social-twitter")
	
	// webjars
	runtime("org.webjars:modernizr:2.8.3")
	runtime("org.webjars:jquery:2.2.4")
	runtime("org.webjars:bootstrap:3.3.6")
	runtime("org.webjars:angularjs:1.5.5")
	runtime("org.webjars:ng-tags-input:2.3.0")
	//runtime("org.webjars:datatables:1.10.11") -- including custom build from static folder
	
	// runtime dependencies
	runtime("org.springframework.boot:spring-boot-starter-actuator")
	runtime("org.springframework.boot:spring-boot-starter-tomcat")
	runtime("org.springframework.boot:spring-boot-devtools")
	runtime("org.jolokia:jolokia-core")
	
	// test dependencies
	testCompile("org.springframework.boot:spring-boot-starter-test")
}

/*
 * Build Settings
 */
compileJava {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

bootRepackage {
	mainClass = "test.apollo.ApolloTest"
	excludeDevtools = false
	// comment out the following line if you want to create an executable war file
	enabled = true
}

/*
 * Eclipse settings
 */
eclipse {
	classpath {
		defaultOutputDir = file("build/classes")
		
		file {
			whenMerged { classpath ->
				classpath.entries.removeAll { entry -> entry.kind == "con" && entry.path == "org.eclipse.jst.j2ee.internal.web.container" }
				classpath.entries.collect { entry ->
					if (entry.kind == "con" && entry.path == "org.eclipse.jdt.launching.JRE_CONTAINER") {
						entry.path = "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-" + javaVersion
					}
					
					entry
				}
			}
		}
	}
	jdt {
		sourceCompatibility = javaVersion
		targetCompatibility = javaVersion
		
		file {
			withProperties { properties ->
				properties.put("org.eclipse.jdt.core.compiler.processAnnotations", "disabled")
				properties.put("org.eclipse.jdt.core.compiler.codegen.targetPlatform", javaVersion)
			}
		}
	}
	wtp {
		component {
			contextPath = "apollo"
			deployName = "apollo"
			property name: "java-output-path", value: "/apollo/build/classes"
		}
		facet {
			facet name: "jst.java", version: javaVersion
			facet name: "jst.web", version: servletVersion
			facet name: "wst.jsdt.web", version: "1.0"
			
			file {
				whenMerged { wtpFacet -> 
					wtpFacet.facets.removeAll { facetEntry -> facetEntry.name == "jst.java" && facetEntry.version != javaVersion }
					wtpFacet.facets.removeAll { facetEntry -> facetEntry.name == "jst.web" && facetEntry.version != servletVersion }
				}
			}
		}
	}
}

task testTask << {
	println "hello";
}